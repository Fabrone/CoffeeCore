rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() &&
            exists(/databases/$(database)/documents/Admins/$(request.auth.uid));
    }

    function isCoopAdmin(coopId) {
      return isAuthenticated() &&
            exists(/databases/$(database)/documents/CoopAdmins/$(request.auth.uid)) &&
            get(/databases/$(database)/documents/CoopAdmins/$(request.auth.uid)).data.cooperative == coopId;
    }

    function isMarketManager(coopId) {
      return isAuthenticated() &&
            exists(/databases/$(database)/documents/$(coopId + '_marketmanagers')/$(request.auth.uid));
    }

    function isUserInCoop(coopId, userId) {
      return exists(/databases/$(database)/documents/$(coopId + '_users')/$(userId));
    }

    function getCoopAdminCooperative() {
      return get(/databases/$(database)/documents/CoopAdmins/$(request.auth.uid)).data.cooperative;
    }

    function isAnyCoopAdmin() {
      return isAuthenticated() &&
            exists(/databases/$(database)/documents/CoopAdmins/$(request.auth.uid));
    }

    // SoilData collection
    match /SoilData/{documentId} {
      allow read: if isAuthenticated() &&
                  (request.auth.uid == resource.data.userId ||
                    isAdmin() ||
                    (resource.data.userId != null &&
                    isCoopAdmin(getCoopAdminCooperative()) &&
                    isUserInCoop(getCoopAdminCooperative(), resource.data.userId)));
      allow create: if isAuthenticated() &&
                      request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() &&
                      (request.auth.uid == resource.data.userId ||
                      isAdmin() ||
                      (resource.data.userId != null &&
                        isCoopAdmin(getCoopAdminCooperative()) &&
                        isUserInCoop(getCoopAdminCooperative(), resource.data.userId)));
      allow delete: if isAdmin() ||
                      (resource.data.userId != null &&
                      isCoopAdmin(getCoopAdminCooperative()) &&
                      isUserInCoop(getCoopAdminCooperative(), resource.data.userId));
    }

    // Manuals collection
    match /Manuals/{manualId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isAdmin() || isAnyCoopAdmin()) &&
                    request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
                    (isAdmin() || isAnyCoopAdmin()) &&
                    resource.data.userId == request.auth.uid;
      allow delete: if isAdmin();
    }

    // Admins collection
    match /Admins/{adminId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == adminId);
      allow write: if isAdmin();
    }

    // CoopAdmins collection
    match /CoopAdmins/{coopAdminId} {
      allow read: if isAdmin() ||
                    isCoopAdmin(get(/databases/$(database)/documents/CoopAdmins/$(coopAdminId)).data.cooperative) ||
                    (isAuthenticated() && request.auth.uid == coopAdminId);
      allow write: if isAdmin() || (isAuthenticated() && request.auth.uid == coopAdminId);
    }

    // Users collection
    match /Users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow read, write: if isAdmin();
      match /FarmCycles/{cycleName} {
        allow read, create, update, delete: if isAuthenticated() && request.auth.uid == userId;
        allow read, write: if isAdmin();
      }
    }

    // FarmData collection
    match /FarmData/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow read, write: if isAdmin();
      match /Cycles/{cycleName} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
        allow read, write: if isAdmin();
      }
    }

    // Cooperatives collection
    match /cooperatives/{coopId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && exists(/databases/$(database)/documents/CoopAdmins/$(request.auth.uid));
      allow update, delete: if isAdmin();
      // Logs collection for market managers and coop admins
      match /logs/{logId} {
        allow create: if isCoopAdmin(coopId) || isMarketManager(coopId);
        allow read: if isCoopAdmin(coopId) || isMarketManager(coopId) || isAdmin();
        allow update, delete: if isAdmin();
      }
      // Coop admin logs (existing)
      match /logs/coop_admin_logs/logs/{logId} {
        allow create, read: if isCoopAdmin(coopId);
        allow read, write: if isAdmin();
      }
    }

    // Cooperative-specific collections
    match /{collection}/{documentId} {
      // Users (e.g., {coopId}_users)
      allow read: if collection.matches('.*_users') &&
                  (isAdmin() ||
                    isCoopAdmin(collection.replace('_users', '')) ||
                    isMarketManager(collection.replace('_users', '')) ||
                    (isAuthenticated() && request.auth.uid == documentId));
      allow create: if collection.matches('.*_users') &&
                    isAuthenticated() && request.auth.uid == documentId;
      allow write, delete: if collection.matches('.*_users') &&
                          (isAdmin() || isCoopAdmin(collection.replace('_users', '')));

      // Market managers (e.g., {coopId}_marketmanagers)
      allow read: if collection.matches('.*_marketmanagers') &&
                  (isAdmin() ||
                    isCoopAdmin(collection.replace('_marketmanagers', '')) ||
                    (isAuthenticated() && request.auth.uid == documentId));
      allow create, update: if collection.matches('.*_marketmanagers') &&
                            (isAdmin() || isCoopAdmin(collection.replace('_marketmanagers', '')));
      allow delete: if isAdmin();

      // Loan managers (e.g., {coopId}_loanmanagers)
      allow read: if collection.matches('.*_loanmanagers') &&
                  (isAdmin() ||
                    isCoopAdmin(collection.replace('_loanmanagers', '')) ||
                    (isAuthenticated() && request.auth.uid == documentId));
      allow create, update: if collection.matches('.*_loanmanagers') &&
                            (isAdmin() || isCoopAdmin(collection.replace('_loanmanagers', '')));
      allow delete: if isAdmin();

      // Coffee prices (e.g., {coopId}_coffeeprices)
      allow read: if collection.matches('.*_coffeeprices') && isAuthenticated();
      allow create, update, delete: if collection.matches('.*_coffeeprices') &&
                                    (isAdmin() ||
                                    isCoopAdmin(collection.replace('_coffeeprices', '')) ||
                                    isMarketManager(collection.replace('_coffeeprices', '')));

      // ProduceData collection (e.g., {coopId}_ProduceData)
      allow read: if collection.matches('.*_ProduceData') &&
                  (isAdmin() ||
                    isCoopAdmin(collection.replace('_ProduceData', '')) ||
                    (isAuthenticated() && request.auth.uid == documentId));
      allow create: if collection.matches('.*_ProduceData') &&
                      isAuthenticated() && request.auth.uid == documentId;
      allow update: if collection.matches('.*_ProduceData') &&
                      (isAdmin() ||
                      isCoopAdmin(collection.replace('_ProduceData', '')) ||
                      (isAuthenticated() && request.auth.uid == documentId));
      allow delete: if collection.matches('.*_ProduceData') &&
                      (isAdmin() || isCoopAdmin(collection.replace('_ProduceData', '')));

      // FarmerProduce collection (e.g., {coopId}_FarmerProduce)
      allow read: if collection.matches('.*_FarmerProduce') &&
                  (isAdmin() ||
                    isCoopAdmin(collection.replace('_FarmerProduce', '')) ||
                    isMarketManager(collection.replace('_FarmerProduce', '')) ||
                    (isAuthenticated() && request.auth.uid == documentId));
      allow create, update: if collection.matches('.*_FarmerProduce') &&
                            (isAdmin() ||
                            isCoopAdmin(collection.replace('_FarmerProduce', '')) ||
                            isMarketManager(collection.replace('_FarmerProduce', '')) ||
                            (isAuthenticated() && request.auth.uid == documentId));
      allow delete: if collection.matches('.*_FarmerProduce') &&
                      (isAdmin() || isCoopAdmin(collection.replace('_FarmerProduce', '')));

      // Subcollections (e.g., {coopId}_FarmerProduce/{userId}/submissions)
      match /submissions/{submissionId} {
        allow read: if collection.matches('.*_FarmerProduce') &&
                    (isAdmin() ||
                      isCoopAdmin(collection.replace('_FarmerProduce', '')) ||
                      isMarketManager(collection.replace('_FarmerProduce', '')) ||
                      (isAuthenticated() && request.auth.uid == documentId));
        allow create, update: if collection.matches('.*_FarmerProduce') &&
                              (isAdmin() ||
                              isCoopAdmin(collection.replace('_FarmerProduce', '')) ||
                              isMarketManager(collection.replace('_FarmerProduce', '')) ||
                              (isAuthenticated() && request.auth.uid == documentId));
        allow delete: if collection.matches('.*_FarmerProduce') &&
                        (isAdmin() || isCoopAdmin(collection.replace('_FarmerProduce', '')));
      }
    }

    // New Activity Data collection
    match /Activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
      allow delete: if isAdmin() || (request.auth.uid == resource.data.userId);
    }

    // Coffee pest interventions
    match /coffee_pest_interventions/{documentId} {
      allow read: if isAuthenticated() &&
                  (request.auth.uid == resource.data.userId ||
                    isAdmin() ||
                    (resource.data.userId != null &&
                    isCoopAdmin(getCoopAdminCooperative()) &&
                    isUserInCoop(getCoopAdminCooperative(), resource.data.userId)));
      allow create: if isAuthenticated() &&
                      (request.auth.uid == request.resource.data.userId ||
                      isAdmin() ||
                      (request.resource.data.userId != null &&
                        isCoopAdmin(getCoopAdminCooperative()) &&
                        isUserInCoop(getCoopAdminCooperative(), request.resource.data.userId)));
      allow update: if isAuthenticated() &&
                      (request.auth.uid == resource.data.userId ||
                      isAdmin() ||
                      (resource.data.userId != null &&
                        isCoopAdmin(getCoopAdminCooperative()) &&
                        isUserInCoop(getCoopAdminCooperative(), resource.data.userId)));
      allow delete: if isAdmin() ||
                      (resource.data.userId != null &&
                      isCoopAdmin(getCoopAdminCooperative()) &&
                      isUserInCoop(getCoopAdminCooperative(), resource.data.userId));
    }

    // Coffee disease interventions
    match /coffee_disease_interventions/{documentId} {
      allow read: if isAuthenticated() &&
                  (request.auth.uid == resource.data.userId ||
                    isAdmin() ||
                    (resource.data.userId != null &&
                    isCoopAdmin(getCoopAdminCooperative()) &&
                    isUserInCoop(getCoopAdminCooperative(), resource.data.userId)));
      allow create: if isAuthenticated() &&
                      (request.auth.uid == request.resource.data.userId ||
                      isAdmin() ||
                      (request.resource.data.userId != null &&
                        isCoopAdmin(getCoopAdminCooperative()) &&
                        isUserInCoop(getCoopAdminCooperative(), request.resource.data.userId)));
      allow update: if isAuthenticated() &&
                      (request.auth.uid == resource.data.userId ||
                      isAdmin() ||
                      (resource.data.userId != null &&
                        isCoopAdmin(getCoopAdminCooperative()) &&
                        isUserInCoop(getCoopAdminCooperative(), resource.data.userId)));
      allow delete: if isAuthenticated() &&
                      (request.auth.uid == resource.data.userId ||
                      isAdmin() ||
                      (resource.data.userId != null &&
                        isCoopAdmin(getCoopAdminCooperative()) &&
                        isUserInCoop(getCoopAdminCooperative(), resource.data.userId)));
    }

    // Admin logs
    match /admin_logs/{logId} {
      allow read, write: if isAdmin();
    }

    // User logs
    match /User_logs/{logId} {
      allow create: if isAuthenticated();
      allow read, write: if isAdmin();
    }
  }
}